"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _easy = require("easy");
var _constants = require("../constants");
var _event = require("../utilitites/event");
var LEFT_MOUSE_BUTTON = _easy.constants.LEFT_MOUSE_BUTTON;
function onDragging(draggingHandler, element) {
    var eventType = _constants.DRAGGING, handler = draggingHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDragging(draggingHandler, element) {
    var eventType = _constants.DRAGGING, handler = draggingHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStopDragging(stopDragHandler, element) {
    var eventType = _constants.STOP_DRAGGING, handler = stopDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStopDragging(stopDragHandler, element) {
    var eventType = _constants.STOP_DRAGGING, handler = stopDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStartDragging(startDragHandler, element) {
    var eventType = _constants.START_DRAGGING, handler = startDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStartDragging(startDragHandler, element) {
    var eventType = _constants.START_DRAGGING, handler = startDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function enableDragging() {
    var timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
    this.onMouseDown(mouseDownHandler, this);
}
function disableDragging() {
    this.offMouseDown(mouseDownHandler, this);
}
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var timeout = this.getTimeout();
    if (timeout === null) {
        timeout = setTimeout((function() {
            this.resetTimeout();
            var draggableMouseOver = this.isMouseOver(mouseTop, mouseLeft);
            if (draggableMouseOver) {
                this.startDragging(mouseTop, mouseLeft);
            }
        }).bind(this), _constants.START_DRAG_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function startDragging(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), eventType = _constants.START_DRAGGING, boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), topOffset = mouseTop - boundsTop, leftOffset = mouseLeft - boundsLeft, startMouseTop = mouseTop, startMouseLeft = mouseLeft, relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    this.addClass("dragging");
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
    this.dragging(mouseTop, mouseLeft);
}
function stopDragging(mouseTop, mouseLeft) {
    var eventType = _constants.STOP_DRAGGING, startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
    this.removeClass("dragging");
}
function dragging(mouseTop, mouseLeft) {
    var eventType = _constants.DRAGGING, scrollTop = _easy.window.getScrollTop(), scrollLeft = _easy.window.getScrollLeft(), topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    var top = startMouseTop + relativeMouseTop - topOffset - scrollTop, left = startMouseLeft + relativeMouseLeft - leftOffset - scrollLeft;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    var css = {
        top: top,
        left: left
    };
    this.css(css);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
}
function callHandlers(eventType, relativeMouseTop, relativeMouseLeft) {
    var eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element;
        handler.call(element, relativeMouseTop, relativeMouseLeft);
    });
}
function isMouseOver(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsOverlappingMouse = bounds.isOverlappingMouse(mouseTop, mouseLeft), draggableMouseOver = boundsOverlappingMouse; ///
    return draggableMouseOver;
}
function getTimeout() {
    var state = this.getState(), timeout = state.timeout;
    return timeout;
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function getTopOffset() {
    var state = this.getState(), topOffset = state.topOffset;
    return topOffset;
}
function getLeftOffset() {
    var state = this.getState(), leftOffset = state.leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var state = this.getState(), startMouseTop = state.startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var state = this.getState(), startMouseLeft = state.startMouseLeft;
    return startMouseLeft;
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
var _default = {
    onDragging: onDragging,
    offDragging: offDragging,
    onStopDragging: onStopDragging,
    offStopDragging: offStopDragging,
    onStartDragging: onStartDragging,
    offStartDragging: offStartDragging,
    enableDragging: enableDragging,
    disableDragging: disableDragging,
    isDragging: isDragging,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    startDragging: startDragging,
    stopDragging: stopDragging,
    dragging: dragging,
    callHandlers: callHandlers,
    isMouseOver: isMouseOver,
    getTimeout: getTimeout,
    resetTimeout: resetTimeout,
    updateTimeout: updateTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft
};
exports.default = _default;
function mouseUpHandler(event, element) {
    _easy.window.off(_constants.BLUR, mouseUpHandler, this); ///
    _easy.window.offMouseUp(mouseUpHandler, this);
    _easy.window.offMouseMove(mouseMoveHandler, this);
    var dragging1 = this.isDragging();
    if (dragging1) {
        var mouseTop = _event.mouseTopFromEvent(event), mouseLeft = _event.mouseLeftFromEvent(event);
        this.stopDragging(mouseTop, mouseLeft);
    } else {
        this.stopWaitingToDrag();
    }
}
function mouseDownHandler(event, element) {
    var button = event.button;
    _easy.window.on(_constants.BLUR, mouseUpHandler, this); ///
    _easy.window.onMouseUp(mouseUpHandler, this);
    _easy.window.onMouseMove(mouseMoveHandler, this);
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging1 = this.isDragging();
        if (!dragging1) {
            var mouseTop = _event.mouseTopFromEvent(event), mouseLeft = _event.mouseLeftFromEvent(event);
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
}
function mouseMoveHandler(event, element) {
    var dragging2 = this.isDragging();
    if (dragging2) {
        var mouseTop = _event.mouseTopFromEvent(event), mouseLeft = _event.mouseLeftFromEvent(event);
        this.dragging(mouseTop, mouseLeft);
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvZHJhZ2dhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyB3aW5kb3csIGNvbnN0YW50cyB9IGZyb20gXCJlYXN5XCI7XG5cbmltcG9ydCB7IEJMVVIgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBtb3VzZVRvcEZyb21FdmVudCwgbW91c2VMZWZ0RnJvbUV2ZW50IH0gZnJvbSBcIi4uL3V0aWxpdGl0ZXMvZXZlbnRcIjtcbmltcG9ydCB7IERSQUdHSU5HLCBTVE9QX0RSQUdHSU5HLCBTVEFSVF9EUkFHR0lORywgU1RBUlRfRFJBR19ERUxBWSB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgeyBMRUZUX01PVVNFX0JVVFRPTiB9ID0gY29uc3RhbnRzO1xuXG5mdW5jdGlvbiBvbkRyYWdnaW5nKGRyYWdnaW5nSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBEUkFHR0lORyxcbiAgICAgICAgaGFuZGxlciA9IGRyYWdnaW5nSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZEcmFnZ2luZyhkcmFnZ2luZ0hhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gRFJBR0dJTkcsXG4gICAgICAgIGhhbmRsZXIgPSBkcmFnZ2luZ0hhbmRsZXI7ICAvLy9cblxuICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb25TdG9wRHJhZ2dpbmcoc3RvcERyYWdIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IFNUT1BfRFJBR0dJTkcsXG4gICAgICAgIGhhbmRsZXIgPSBzdG9wRHJhZ0hhbmRsZXI7ICAvLy9cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gb2ZmU3RvcERyYWdnaW5nKHN0b3BEcmFnSGFuZGxlciwgZWxlbWVudCkge1xuICBjb25zdCBldmVudFR5cGUgPSBTVE9QX0RSQUdHSU5HLFxuICAgICAgICBoYW5kbGVyID0gc3RvcERyYWdIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIG9uU3RhcnREcmFnZ2luZyhzdGFydERyYWdIYW5kbGVyLCBlbGVtZW50KSB7XG4gIGNvbnN0IGV2ZW50VHlwZSA9IFNUQVJUX0RSQUdHSU5HLFxuICAgICAgICBoYW5kbGVyID0gc3RhcnREcmFnSGFuZGxlcjsgIC8vL1xuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBvZmZTdGFydERyYWdnaW5nKHN0YXJ0RHJhZ0hhbmRsZXIsIGVsZW1lbnQpIHtcbiAgY29uc3QgZXZlbnRUeXBlID0gU1RBUlRfRFJBR0dJTkcsXG4gICAgICAgIGhhbmRsZXIgPSBzdGFydERyYWdIYW5kbGVyOyAgLy8vXG5cbiAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZURyYWdnaW5nKCkge1xuICBjb25zdCB0aW1lb3V0ID0gbnVsbCxcbiAgICAgICAgdG9wT2Zmc2V0ID0gbnVsbCxcbiAgICAgICAgbGVmdE9mZnNldCA9IG51bGwsXG4gICAgICAgIHN0YXJ0TW91c2VUb3AgPSBudWxsLFxuICAgICAgICBzdGFydE1vdXNlTGVmdCA9IG51bGw7XG5cbiAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgdGltZW91dCxcbiAgICB0b3BPZmZzZXQsXG4gICAgbGVmdE9mZnNldCxcbiAgICBzdGFydE1vdXNlVG9wLFxuICAgIHN0YXJ0TW91c2VMZWZ0XG4gIH0pO1xuXG4gIHRoaXMub25Nb3VzZURvd24obW91c2VEb3duSGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVEcmFnZ2luZygpIHtcbiAgdGhpcy5vZmZNb3VzZURvd24obW91c2VEb3duSGFuZGxlciwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIGlzRHJhZ2dpbmcoKSB7XG4gIGNvbnN0IGRyYWdnaW5nID0gdGhpcy5oYXNDbGFzcyhcImRyYWdnaW5nXCIpO1xuXG4gIHJldHVybiBkcmFnZ2luZztcbn1cblxuZnVuY3Rpb24gc3RhcnRXYWl0aW5nVG9EcmFnKG1vdXNlVG9wLCBtb3VzZUxlZnQpIHtcbiAgbGV0IHRpbWVvdXQgPSB0aGlzLmdldFRpbWVvdXQoKTtcblxuICBpZiAodGltZW91dCA9PT0gbnVsbCkge1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVzZXRUaW1lb3V0KCk7XG5cbiAgICAgIGNvbnN0IGRyYWdnYWJsZU1vdXNlT3ZlciA9IHRoaXMuaXNNb3VzZU92ZXIobW91c2VUb3AsIG1vdXNlTGVmdCk7XG5cbiAgICAgIGlmIChkcmFnZ2FibGVNb3VzZU92ZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydERyYWdnaW5nKG1vdXNlVG9wLCBtb3VzZUxlZnQpO1xuICAgICAgfVxuICAgIH0sIFNUQVJUX0RSQUdfREVMQVkpO1xuXG4gICAgdGhpcy51cGRhdGVUaW1lb3V0KHRpbWVvdXQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BXYWl0aW5nVG9EcmFnKCkge1xuICBjb25zdCB0aW1lb3V0ID0gdGhpcy5nZXRUaW1lb3V0KCk7XG5cbiAgaWYgKHRpbWVvdXQgIT09IG51bGwpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICB0aGlzLnJlc2V0VGltZW91dCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0RHJhZ2dpbmcobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBib3VuZHMgPSB0aGlzLmdldEJvdW5kcygpLFxuICAgICAgICBldmVudFR5cGUgPSBTVEFSVF9EUkFHR0lORyxcbiAgICAgICAgYm91bmRzVG9wID0gYm91bmRzLmdldFRvcCgpLFxuICAgICAgICBib3VuZHNMZWZ0ID0gYm91bmRzLmdldExlZnQoKSxcbiAgICAgICAgdG9wT2Zmc2V0ID0gbW91c2VUb3AgLSBib3VuZHNUb3AsXG4gICAgICAgIGxlZnRPZmZzZXQgPSBtb3VzZUxlZnQgLSBib3VuZHNMZWZ0LFxuICAgICAgICBzdGFydE1vdXNlVG9wID0gbW91c2VUb3AsIC8vL1xuICAgICAgICBzdGFydE1vdXNlTGVmdCA9IG1vdXNlTGVmdCwgLy8vXG4gICAgICAgIHJlbGF0aXZlTW91c2VUb3AgPSBtb3VzZVRvcCAtIHN0YXJ0TW91c2VUb3AsXG4gICAgICAgIHJlbGF0aXZlTW91c2VMZWZ0ID0gbW91c2VMZWZ0IC0gc3RhcnRNb3VzZUxlZnQ7XG5cbiAgdGhpcy5hZGRDbGFzcyhcImRyYWdnaW5nXCIpO1xuXG4gIHRoaXMuc2V0VG9wT2Zmc2V0KHRvcE9mZnNldCk7XG5cbiAgdGhpcy5zZXRMZWZ0T2Zmc2V0KGxlZnRPZmZzZXQpO1xuXG4gIHRoaXMuc2V0U3RhcnRNb3VzZVRvcChzdGFydE1vdXNlVG9wKTtcblxuICB0aGlzLnNldFN0YXJ0TW91c2VMZWZ0KHN0YXJ0TW91c2VMZWZ0KTtcblxuICB0aGlzLmNhbGxIYW5kbGVycyhldmVudFR5cGUsIHJlbGF0aXZlTW91c2VUb3AsIHJlbGF0aXZlTW91c2VMZWZ0KTtcblxuICB0aGlzLmRyYWdnaW5nKG1vdXNlVG9wLCBtb3VzZUxlZnQpO1xufVxuXG5mdW5jdGlvbiBzdG9wRHJhZ2dpbmcobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBldmVudFR5cGUgPSBTVE9QX0RSQUdHSU5HLFxuICAgICAgICBzdGFydE1vdXNlVG9wID0gdGhpcy5nZXRTdGFydE1vdXNlVG9wKCksXG4gICAgICAgIHN0YXJ0TW91c2VMZWZ0ID0gdGhpcy5nZXRTdGFydE1vdXNlTGVmdCgpLFxuICAgICAgICByZWxhdGl2ZU1vdXNlVG9wID0gbW91c2VUb3AgLSBzdGFydE1vdXNlVG9wLFxuICAgICAgICByZWxhdGl2ZU1vdXNlTGVmdCA9IG1vdXNlTGVmdCAtIHN0YXJ0TW91c2VMZWZ0O1xuXG4gIHRoaXMuY2FsbEhhbmRsZXJzKGV2ZW50VHlwZSwgcmVsYXRpdmVNb3VzZVRvcCwgcmVsYXRpdmVNb3VzZUxlZnQpO1xuXG4gIHRoaXMucmVtb3ZlQ2xhc3MoXCJkcmFnZ2luZ1wiKTtcbn1cblxuZnVuY3Rpb24gZHJhZ2dpbmcobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBldmVudFR5cGUgPSBEUkFHR0lORyxcbiAgICAgICAgc2Nyb2xsVG9wID0gd2luZG93LmdldFNjcm9sbFRvcCgpLFxuICAgICAgICBzY3JvbGxMZWZ0ID0gd2luZG93LmdldFNjcm9sbExlZnQoKSxcbiAgICAgICAgdG9wT2Zmc2V0ID0gdGhpcy5nZXRUb3BPZmZzZXQoKSxcbiAgICAgICAgbGVmdE9mZnNldCA9IHRoaXMuZ2V0TGVmdE9mZnNldCgpLFxuICAgICAgICBzdGFydE1vdXNlVG9wID0gdGhpcy5nZXRTdGFydE1vdXNlVG9wKCksXG4gICAgICAgIHN0YXJ0TW91c2VMZWZ0ID0gdGhpcy5nZXRTdGFydE1vdXNlTGVmdCgpLFxuICAgICAgICByZWxhdGl2ZU1vdXNlVG9wID0gbW91c2VUb3AgLSBzdGFydE1vdXNlVG9wLFxuICAgICAgICByZWxhdGl2ZU1vdXNlTGVmdCA9IG1vdXNlTGVmdCAtIHN0YXJ0TW91c2VMZWZ0O1xuXG4gIGxldCB0b3AgPSBzdGFydE1vdXNlVG9wICsgcmVsYXRpdmVNb3VzZVRvcCAtIHRvcE9mZnNldCAtIHNjcm9sbFRvcCxcbiAgICAgIGxlZnQgPSBzdGFydE1vdXNlTGVmdCArIHJlbGF0aXZlTW91c2VMZWZ0IC0gbGVmdE9mZnNldCAtIHNjcm9sbExlZnQ7XG5cbiAgdG9wID0gYCR7dG9wfXB4YDsgLy8vXG4gIGxlZnQgPSBgJHtsZWZ0fXB4YDsgLy8vXG5cbiAgY29uc3QgY3NzID0ge1xuICAgIHRvcCxcbiAgICBsZWZ0XG4gIH07XG5cbiAgdGhpcy5jc3MoY3NzKTtcblxuICB0aGlzLmNhbGxIYW5kbGVycyhldmVudFR5cGUsIHJlbGF0aXZlTW91c2VUb3AsIHJlbGF0aXZlTW91c2VMZWZ0KTtcbn1cblxuZnVuY3Rpb24gY2FsbEhhbmRsZXJzKGV2ZW50VHlwZSwgcmVsYXRpdmVNb3VzZVRvcCwgcmVsYXRpdmVNb3VzZUxlZnQpIHtcbiAgY29uc3QgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmZpbmRFdmVudExpc3RlbmVycyhldmVudFR5cGUpO1xuXG4gIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGV2ZW50TGlzdGVuZXIpID0+IHtcbiAgICBjb25zdCB7IGhhbmRsZXIsIGVsZW1lbnQgfSA9IGV2ZW50TGlzdGVuZXI7XG5cbiAgICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgcmVsYXRpdmVNb3VzZVRvcCwgcmVsYXRpdmVNb3VzZUxlZnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNNb3VzZU92ZXIobW91c2VUb3AsIG1vdXNlTGVmdCkge1xuICBjb25zdCBib3VuZHMgPSB0aGlzLmdldEJvdW5kcygpLFxuICAgICAgICBib3VuZHNPdmVybGFwcGluZ01vdXNlID0gYm91bmRzLmlzT3ZlcmxhcHBpbmdNb3VzZShtb3VzZVRvcCwgbW91c2VMZWZ0KSxcbiAgICAgICAgZHJhZ2dhYmxlTW91c2VPdmVyID0gYm91bmRzT3ZlcmxhcHBpbmdNb3VzZTsgLy8vXG5cbiAgcmV0dXJuIGRyYWdnYWJsZU1vdXNlT3Zlcjtcbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICB7IHRpbWVvdXQgfSA9IHN0YXRlO1xuXG4gIHJldHVybiB0aW1lb3V0O1xufVxuXG5mdW5jdGlvbiByZXNldFRpbWVvdXQoKSB7XG4gIGNvbnN0IHRpbWVvdXQgPSBudWxsO1xuXG4gIHRoaXMudXBkYXRlVGltZW91dCh0aW1lb3V0KTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVGltZW91dCh0aW1lb3V0KSB7XG4gIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgIHRpbWVvdXRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFRvcE9mZnNldCgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICAgIHsgdG9wT2Zmc2V0IH0gPSBzdGF0ZTtcblxuICByZXR1cm4gdG9wT2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBnZXRMZWZ0T2Zmc2V0KCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKSxcbiAgICAgICAgeyBsZWZ0T2Zmc2V0IH0gPSBzdGF0ZTtcblxuICByZXR1cm4gbGVmdE9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhcnRNb3VzZVRvcCgpIHtcbiAgY29uc3Qgc3RhdGUgPSB0aGlzLmdldFN0YXRlKCksXG4gICAgICAgIHsgc3RhcnRNb3VzZVRvcCB9ID0gc3RhdGU7XG5cbiAgcmV0dXJuIHN0YXJ0TW91c2VUb3A7XG59XG5cbmZ1bmN0aW9uIGdldFN0YXJ0TW91c2VMZWZ0KCkge1xuICBjb25zdCBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKSxcbiAgICAgICAgeyBzdGFydE1vdXNlTGVmdCB9ID0gc3RhdGU7XG5cbiAgcmV0dXJuIHN0YXJ0TW91c2VMZWZ0O1xufVxuXG5mdW5jdGlvbiBzZXRUb3BPZmZzZXQodG9wT2Zmc2V0KSB7XG4gIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgIHRvcE9mZnNldFxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0TGVmdE9mZnNldChsZWZ0T2Zmc2V0KSB7XG4gIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgIGxlZnRPZmZzZXRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFN0YXJ0TW91c2VUb3Aoc3RhcnRNb3VzZVRvcCkge1xuICB0aGlzLnVwZGF0ZVN0YXRlKHtcbiAgICBzdGFydE1vdXNlVG9wXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRTdGFydE1vdXNlTGVmdChzdGFydE1vdXNlTGVmdCkge1xuICB0aGlzLnVwZGF0ZVN0YXRlKHtcbiAgICBzdGFydE1vdXNlTGVmdFxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBvbkRyYWdnaW5nLFxuICBvZmZEcmFnZ2luZyxcbiAgb25TdG9wRHJhZ2dpbmcsXG4gIG9mZlN0b3BEcmFnZ2luZyxcbiAgb25TdGFydERyYWdnaW5nLFxuICBvZmZTdGFydERyYWdnaW5nLFxuICBlbmFibGVEcmFnZ2luZyxcbiAgZGlzYWJsZURyYWdnaW5nLFxuICBpc0RyYWdnaW5nLFxuICBzdGFydFdhaXRpbmdUb0RyYWcsXG4gIHN0b3BXYWl0aW5nVG9EcmFnLFxuICBzdGFydERyYWdnaW5nLFxuICBzdG9wRHJhZ2dpbmcsXG4gIGRyYWdnaW5nLFxuICBjYWxsSGFuZGxlcnMsXG4gIGlzTW91c2VPdmVyLFxuICBnZXRUaW1lb3V0LFxuICByZXNldFRpbWVvdXQsXG4gIHVwZGF0ZVRpbWVvdXQsXG4gIGdldFRvcE9mZnNldCxcbiAgZ2V0TGVmdE9mZnNldCxcbiAgZ2V0U3RhcnRNb3VzZVRvcCxcbiAgZ2V0U3RhcnRNb3VzZUxlZnQsXG4gIHNldFRvcE9mZnNldCxcbiAgc2V0TGVmdE9mZnNldCxcbiAgc2V0U3RhcnRNb3VzZVRvcCxcbiAgc2V0U3RhcnRNb3VzZUxlZnRcbn07XG5cbmZ1bmN0aW9uIG1vdXNlVXBIYW5kbGVyKGV2ZW50LCBlbGVtZW50KSB7XG4gIHdpbmRvdy5vZmYoQkxVUiwgbW91c2VVcEhhbmRsZXIsIHRoaXMpOyAgLy8vXG5cbiAgd2luZG93Lm9mZk1vdXNlVXAobW91c2VVcEhhbmRsZXIsIHRoaXMpO1xuXG4gIHdpbmRvdy5vZmZNb3VzZU1vdmUobW91c2VNb3ZlSGFuZGxlciwgdGhpcyk7XG5cbiAgY29uc3QgZHJhZ2dpbmcgPSB0aGlzLmlzRHJhZ2dpbmcoKTtcblxuICBpZiAoZHJhZ2dpbmcpIHtcbiAgICBjb25zdCBtb3VzZVRvcCA9IG1vdXNlVG9wRnJvbUV2ZW50KGV2ZW50KSxcbiAgICAgICAgICBtb3VzZUxlZnQgPSBtb3VzZUxlZnRGcm9tRXZlbnQoZXZlbnQpO1xuXG4gICAgdGhpcy5zdG9wRHJhZ2dpbmcobW91c2VUb3AsIG1vdXNlTGVmdCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdG9wV2FpdGluZ1RvRHJhZygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vdXNlRG93bkhhbmRsZXIoZXZlbnQsIGVsZW1lbnQpIHtcbiAgY29uc3QgeyBidXR0b24gfSA9IGV2ZW50O1xuXG4gIHdpbmRvdy5vbihCTFVSLCBtb3VzZVVwSGFuZGxlciwgdGhpcyk7IC8vL1xuXG4gIHdpbmRvdy5vbk1vdXNlVXAobW91c2VVcEhhbmRsZXIsIHRoaXMpO1xuXG4gIHdpbmRvdy5vbk1vdXNlTW92ZShtb3VzZU1vdmVIYW5kbGVyLCB0aGlzKTtcblxuICBpZiAoYnV0dG9uID09PSBMRUZUX01PVVNFX0JVVFRPTikge1xuICAgIGNvbnN0IGRyYWdnaW5nID0gdGhpcy5pc0RyYWdnaW5nKCk7XG5cbiAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICBjb25zdCBtb3VzZVRvcCA9IG1vdXNlVG9wRnJvbUV2ZW50KGV2ZW50KSxcbiAgICAgICAgICAgIG1vdXNlTGVmdCA9IG1vdXNlTGVmdEZyb21FdmVudChldmVudCk7XG5cbiAgICAgIHRoaXMuc3RhcnRXYWl0aW5nVG9EcmFnKG1vdXNlVG9wLCBtb3VzZUxlZnQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtb3VzZU1vdmVIYW5kbGVyKGV2ZW50LCBlbGVtZW50KSB7XG4gIGNvbnN0IGRyYWdnaW5nID0gdGhpcy5pc0RyYWdnaW5nKCk7XG5cbiAgaWYgKGRyYWdnaW5nKSB7XG4gICAgY29uc3QgbW91c2VUb3AgPSBtb3VzZVRvcEZyb21FdmVudChldmVudCksXG4gICAgICAgICAgbW91c2VMZWZ0ID0gbW91c2VMZWZ0RnJvbUV2ZW50KGV2ZW50KTtcblxuICAgIHRoaXMuZHJhZ2dpbmcobW91c2VU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