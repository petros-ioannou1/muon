"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _easy = require("easy");
var _constants = require("../constants");
var LEFT_MOUSE_BUTTON = _easy.constants.LEFT_MOUSE_BUTTON;
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var timeout = this.getTimeout();
    if (timeout === null) {
        timeout = setTimeout((function() {
            this.resetTimeout();
            var draggableMouseOver = this.isDraggableMouseOver(mouseTop, mouseLeft);
            if (draggableMouseOver) {
                this.startDrag(mouseTop, mouseLeft);
            }
        }).bind(this), _constants.START_DRAG_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function startDrag(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), eventType = _constants.START_DRAG, boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), topOffset = mouseTop - boundsTop, leftOffset = mouseLeft - boundsLeft, startMouseTop = mouseTop, startMouseLeft = mouseLeft, relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    this.addClass("dragging");
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
    this.drag(mouseTop, mouseLeft);
}
function dragging(mouseTop, mouseLeft) {
    this.drag(mouseTop, mouseLeft);
}
function stopDrag(mouseTop, mouseLeft) {
    var eventType = _constants.STOP_DRAG, startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
    this.removeClass("dragging");
}
function drag(mouseTop, mouseLeft) {
    var eventType = _constants.DRAG, topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    var top = startMouseTop + relativeMouseTop - topOffset, left = startMouseLeft + relativeMouseLeft - leftOffset;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    var css = {
        top: top,
        left: left
    };
    this.css(css);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
}
function onDrag(dragHandler, element) {
    var eventType = _constants.DRAG, handler = dragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDrag(dragHandler, element) {
    var eventType = _constants.DRAG, handler = dragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStopDrag(stopDragHandler, element) {
    var eventType = _constants.STOP_DRAG, handler = stopDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStopDrag(stopDragHandler, element) {
    var eventType = _constants.STOP_DRAG, handler = stopDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStartDrag(startDragHandler, element) {
    var eventType = _constants.START_DRAG, handler = startDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStartDrag(startDragHandler, element) {
    var eventType = _constants.START_DRAG, handler = startDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function callHandlers(eventType, relativeMouseTop, relativeMouseLeft) {
    var eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element;
        handler.call(element, relativeMouseTop, relativeMouseLeft);
    });
}
function enableDragging() {
    this.onMouseDown(this.draggableMouseDownHandler, this);
}
function disableDragging() {
    this.offMouseDown(this.draggableMouseDownHandler, this);
}
function isDraggableMouseOver(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsOverlappingMouse = bounds.isOverlappingMouse(mouseTop, mouseLeft), draggableMouseOver = boundsOverlappingMouse; ///
    return draggableMouseOver;
}
function draggableMouseDownHandler(event, element) {
    var button = event.button;
    _easy.window.on("blur", this.draggableMouseUpHandler, this); ///
    _easy.window.onMouseUp(this.draggableMouseUpHandler, this);
    _easy.window.onMouseMove(this.draggableMouseMoveHandler, this);
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging1 = this.isDragging();
        if (!dragging1) {
            var mouseTop = mouseTopFromEvent(event), mouseLeft = mouseLeftFromEvent(event);
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
}
function draggableMouseMoveHandler(event, element) {
    var mouseTop = mouseTopFromEvent(event), mouseLeft = mouseLeftFromEvent(event);
    var dragging2 = this.isDragging();
    if (dragging2) {
        this.dragging(mouseTop, mouseLeft);
    }
}
function draggableMouseUpHandler(event, element) {
    _easy.window.off("blur", this.draggableMouseUpHandler, this); ///
    _easy.window.offMouseUp(this.draggableMouseUpHandler, this);
    _easy.window.offMouseMove(this.draggableMouseMoveHandler, this);
    var dragging2 = this.isDragging();
    if (dragging2) {
        var mouseTop = mouseTopFromEvent(event), mouseLeft = mouseLeftFromEvent(event);
        this.stopDrag(mouseTop, mouseLeft);
    } else {
        this.stopWaitingToDrag();
    }
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function getTimeout() {
    var state = this.getState(), timeout = state.timeout;
    return timeout;
}
function getTopOffset() {
    var state = this.getState(), topOffset = state.topOffset;
    return topOffset;
}
function getLeftOffset() {
    var state = this.getState(), leftOffset = state.leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var state = this.getState(), startMouseTop = state.startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var state = this.getState(), startMouseLeft = state.startMouseLeft;
    return startMouseLeft;
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
function setInitialState() {
    var timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
}
var _default = {
    isDragging: isDragging,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    startDrag: startDrag,
    dragging: dragging,
    stopDrag: stopDrag,
    drag: drag,
    onDrag: onDrag,
    offDrag: offDrag,
    onStopDrag: onStopDrag,
    offStopDrag: offStopDrag,
    onStartDrag: onStartDrag,
    offStartDrag: offStartDrag,
    callHandlers: callHandlers,
    enableDragging: enableDragging,
    disableDragging: disableDragging,
    isDraggableMouseOver: isDraggableMouseOver,
    draggableMouseDownHandler: draggableMouseDownHandler,
    draggableMouseMoveHandler: draggableMouseMoveHandler,
    draggableMouseUpHandler: draggableMouseUpHandler,
    resetTimeout: resetTimeout,
    getTimeout: getTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    updateTimeout: updateTimeout,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft,
    setInitialState: setInitialState
};
exports.default = _default;
function mouseTopFromEvent(event) {
    var pageY = event.pageY, scrollTop = _easy.window.getScrollTop(), mouseTop = pageY + scrollTop;
    return mouseTop;
}
function mouseLeftFromEvent(event) {
    var pageX = event.pageX, scrollLeft = _easy.window.getScrollLeft(), mouseLeft = pageX + scrollLeft;
    return mouseLeft;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,