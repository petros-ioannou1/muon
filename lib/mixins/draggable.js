"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _easy = require("easy");
var _constants = require("../constants");
var _event = require("../utilitites/event");
var LEFT_MOUSE_BUTTON = _easy.constants.LEFT_MOUSE_BUTTON;
function onDragging(draggingHandler, element) {
    var eventType = _constants.DRAGGING, handler = draggingHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offDragging(draggingHandler, element) {
    var eventType = _constants.DRAGGING, handler = draggingHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStopDragging(stopDragHandler, element) {
    var eventType = _constants.STOP_DRAGGING, handler = stopDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStopDragging(stopDragHandler, element) {
    var eventType = _constants.STOP_DRAGGING, handler = stopDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function onStartDragging(startDragHandler, element) {
    var eventType = _constants.START_DRAGGING, handler = startDragHandler; ///
    this.addEventListener(eventType, handler, element);
}
function offStartDragging(startDragHandler, element) {
    var eventType = _constants.START_DRAGGING, handler = startDragHandler; ///
    this.removeEventListener(eventType, handler, element);
}
function enableDragging() {
    var timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
    this.onMouseDown(mouseDownHandler, this);
}
function disableDragging() {
    this.offMouseDown(mouseDownHandler, this);
}
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var timeout = this.getTimeout();
    if (timeout === null) {
        timeout = setTimeout((function() {
            this.resetTimeout();
            var draggableMouseOver = this.isMouseOver(mouseTop, mouseLeft);
            if (draggableMouseOver) {
                this.startDragging(mouseTop, mouseLeft);
            }
        }).bind(this), _constants.START_DRAG_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function startDragging(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), eventType = _constants.START_DRAGGING, boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), topOffset = mouseTop - boundsTop, leftOffset = mouseLeft - boundsLeft, startMouseTop = mouseTop, startMouseLeft = mouseLeft, relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    this.addClass("dragging");
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
    this.dragging(mouseTop, mouseLeft);
}
function stopDragging(mouseTop, mouseLeft) {
    var eventType = _constants.STOP_DRAGGING, startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
    this.removeClass("dragging");
}
function dragging(mouseTop, mouseLeft) {
    var eventType = _constants.DRAGGING, scrollTop = _easy.window.getScrollTop(), scrollLeft = _easy.window.getScrollLeft(), topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    var top = startMouseTop + relativeMouseTop - topOffset - scrollTop, left = startMouseLeft + relativeMouseLeft - leftOffset - scrollLeft;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    var css = {
        top: top,
        left: left
    };
    this.css(css);
    this.callHandlers(eventType, relativeMouseTop, relativeMouseLeft);
}
function callHandlers(eventType, relativeMouseTop, relativeMouseLeft) {
    var eventListeners = this.findEventListeners(eventType);
    eventListeners.forEach(function(eventListener) {
        var handler = eventListener.handler, element = eventListener.element;
        handler.call(element, relativeMouseTop, relativeMouseLeft);
    });
}
function isMouseOver(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsOverlappingMouse = bounds.isOverlappingMouse(mouseTop, mouseLeft), draggableMouseOver = boundsOverlappingMouse; ///
    return draggableMouseOver;
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function getTimeout() {
    var state = this.getState(), timeout = state.timeout;
    return timeout;
}
function getTopOffset() {
    var state = this.getState(), topOffset = state.topOffset;
    return topOffset;
}
function getLeftOffset() {
    var state = this.getState(), leftOffset = state.leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var state = this.getState(), startMouseTop = state.startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var state = this.getState(), startMouseLeft = state.startMouseLeft;
    return startMouseLeft;
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
var _default = {
    onDragging: onDragging,
    offDragging: offDragging,
    onStopDragging: onStopDragging,
    offStopDragging: offStopDragging,
    onStartDragging: onStartDragging,
    offStartDragging: offStartDragging,
    enableDragging: enableDragging,
    disableDragging: disableDragging,
    isDragging: isDragging,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    startDragging: startDragging,
    stopDragging: stopDragging,
    dragging: dragging,
    callHandlers: callHandlers,
    isMouseOver: isMouseOver,
    resetTimeout: resetTimeout,
    getTimeout: getTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    updateTimeout: updateTimeout,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft
};
exports.default = _default;
function mouseUpHandler(event, element) {
    _easy.window.off(_constants.BLUR, mouseUpHandler, this); ///
    _easy.window.offMouseUp(mouseUpHandler, this);
    _easy.window.offMouseMove(mouseMoveHandler, this);
    var dragging1 = this.isDragging();
    if (dragging1) {
        var mouseTop = _event.mouseTopFromEvent(event), mouseLeft = _event.mouseLeftFromEvent(event);
        this.stopDragging(mouseTop, mouseLeft);
    } else {
        this.stopWaitingToDrag();
    }
}
function mouseDownHandler(event, element) {
    var button = event.button;
    _easy.window.on(_constants.BLUR, mouseUpHandler, this); ///
    _easy.window.onMouseUp(mouseUpHandler, this);
    _easy.window.onMouseMove(mouseMoveHandler, this);
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging1 = this.isDragging();
        if (!dragging1) {
            var mouseTop = _event.mouseTopFromEvent(event), mouseLeft = _event.mouseLeftFromEvent(event);
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
}
function mouseMoveHandler(event, element) {
    var dragging2 = this.isDragging();
    if (dragging2) {
        var mouseTop = _event.mouseTopFromEvent(event), mouseLeft = _event.mouseLeftFromEvent(event);
        this.dragging(mouseTop, mouseLeft);
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,