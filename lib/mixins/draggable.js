"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _easy = require("easy");
var _constants = require("../constants");
var LEFT_MOUSE_BUTTON = _easy.constants.LEFT_MOUSE_BUTTON;
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var timeout = this.getTimeout();
    if (timeout === null) {
        timeout = setTimeout((function() {
            this.resetTimeout();
            var draggableMouseOver = this.isDraggableMouseOver(mouseTop, mouseLeft);
            if (draggableMouseOver) {
                this.startDragging(mouseTop, mouseLeft);
            }
        }).bind(this), _constants.START_DRAGGING_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function startDragging(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), topOffset = mouseTop - boundsTop, leftOffset = mouseLeft - boundsLeft, startMouseTop = mouseTop, startMouseLeft = mouseLeft; ///
    this.addClass("dragging");
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.drag(mouseTop, mouseLeft);
}
function stopDragging() {
    this.removeClass("dragging");
}
function dragging(mouseTop, mouseLeft) {
    this.drag(mouseTop, mouseLeft);
}
function drag(mouseTop, mouseLeft) {
    var topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), relativeMouseTop = mouseTop - startMouseTop, relativeMouseLeft = mouseLeft - startMouseLeft;
    var top = startMouseTop + relativeMouseTop - topOffset, left = startMouseLeft + relativeMouseLeft - leftOffset;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    var css = {
        top: top,
        left: left
    };
    this.css(css);
    if (this.hasOwnProperty("dragEventListeners")) {
        this.dragEventListeners.forEach(function(dragEventListener) {
            dragEventListener(relativeMouseTop, relativeMouseLeft);
        });
    }
}
function onDrag(dragHandler, element) {
    this.addDragEventListener(dragHandler, element);
}
function offDrag(dragHandler, element) {
    this.removeDragEventListener(dragHandler, element);
}
function enableDragging() {
    this.onMouseDown(this.draggableMouseDownHandler, this);
}
function disableDragging() {
    this.offMouseDown(this.draggableMouseDownHandler, this);
}
function isDraggableMouseOver(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsOverlappingMouse = bounds.isOverlappingMouse(mouseTop, mouseLeft), draggableMouseOver = boundsOverlappingMouse; ///
    return draggableMouseOver;
}
function draggableMouseDownHandler(event, element) {
    var button = event.button;
    _easy.window.on("blur", this.draggableMouseUpHandler, this); ///
    _easy.window.onMouseUp(this.draggableMouseUpHandler, this);
    _easy.window.onMouseMove(this.draggableMouseMoveHandler, this);
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging1 = this.isDragging();
        if (!dragging1) {
            var mouseTop = mouseTopFromEvent(event), mouseLeft = mouseLeftFromEvent(event);
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
}
function draggableMouseMoveHandler(event, element) {
    var mouseTop = mouseTopFromEvent(event), mouseLeft = mouseLeftFromEvent(event);
    var dragging2 = this.isDragging();
    if (dragging2) {
        this.dragging(mouseTop, mouseLeft);
    }
}
function draggableMouseUpHandler(event, element) {
    _easy.window.off("blur", this.draggableMouseUpHandler, this); ///
    _easy.window.offMouseUp(this.draggableMouseUpHandler, this);
    _easy.window.offMouseMove(this.draggableMouseMoveHandler, this);
    var dragging2 = this.isDragging();
    if (dragging2) {
        this.stopDragging();
    } else {
        this.stopWaitingToDrag();
    }
}
function addDragEventListener(dragHandler, param) {
    var element = param === void 0 ? this : param;
    if (!this.hasOwnProperty("dragEventListeners")) {
        this.dragEventListeners = [];
    }
    var dragEventListener = createDragEventListener(dragHandler, element);
    this.dragEventListeners.push(dragEventListener);
}
function removeDragEventListener(dragHandler, param) {
    var element = param === void 0 ? this : param;
    var dragEventListener = this.findDragEventListener(dragHandler, element), index = this.dragEventListeners.indexOf(dragEventListener), start = index, deleteCount = 1;
    this.dragEventListeners.splice(start, deleteCount);
    if (this.dragEventListeners.length === 0) {
        delete this.dragEventListeners;
    }
}
function createDragEventListener(dragHandler, element) {
    var dragEventListener;
    dragEventListener = function(relativeMouseTop, relativeMouseLeft) {
        dragHandler.call(element, relativeMouseTop, relativeMouseLeft);
    };
    Object.assign(dragEventListener, {
        element: element,
        dragHandler: dragHandler
    });
    return dragEventListener;
}
function findDragEventListener(dragHandler, element) {
    var eventListener = this.dragEventListeners.find(function(dragEventListener) {
        var found = dragEventListener.element === element && dragEventListener.dragHandler === dragHandler;
        if (found) {
            return true;
        }
    });
    return eventListener;
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function getTimeout() {
    var state = this.getState(), timeout = state.timeout;
    return timeout;
}
function getTopOffset() {
    var state = this.getState(), topOffset = state.topOffset;
    return topOffset;
}
function getLeftOffset() {
    var state = this.getState(), leftOffset = state.leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var state = this.getState(), startMouseTop = state.startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var state = this.getState(), startMouseLeft = state.startMouseLeft;
    return startMouseLeft;
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
function setInitialState() {
    var timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
}
var _default = {
    isDragging: isDragging,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    startDragging: startDragging,
    stopDragging: stopDragging,
    dragging: dragging,
    drag: drag,
    onDrag: onDrag,
    offDrag: offDrag,
    enableDragging: enableDragging,
    disableDragging: disableDragging,
    isDraggableMouseOver: isDraggableMouseOver,
    draggableMouseDownHandler: draggableMouseDownHandler,
    draggableMouseMoveHandler: draggableMouseMoveHandler,
    draggableMouseUpHandler: draggableMouseUpHandler,
    addDragEventListener: addDragEventListener,
    removeDragEventListener: removeDragEventListener,
    createDragEventListener: createDragEventListener,
    findDragEventListener: findDragEventListener,
    resetTimeout: resetTimeout,
    getTimeout: getTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    updateTimeout: updateTimeout,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft,
    setInitialState: setInitialState
};
exports.default = _default;
function mouseTopFromEvent(event) {
    var pageY = event.pageY, scrollTop = _easy.window.getScrollTop(), mouseTop = pageY + scrollTop;
    return mouseTop;
}
function mouseLeftFromEvent(event) {
    var pageX = event.pageX, scrollLeft = _easy.window.getScrollLeft(), mouseLeft = pageX + scrollLeft;
    return mouseLeft;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,