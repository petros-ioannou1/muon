"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _sufficient = require("sufficient");
var _easy = require("easy");
var _constants = require("../constants");
var LEFT_MOUSE_BUTTON = _easy.constants.LEFT_MOUSE_BUTTON;
function isDragging() {
    var dragging = this.hasClass("dragging");
    return dragging;
}
function isMouseOver(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsOverlappingMouse = bounds.isOverlappingMouse(mouseTop, mouseLeft), mouseOver = boundsOverlappingMouse; ///
    return mouseOver;
}
function startDragging(mouseTop, mouseLeft) {
    var bounds = this.getBounds(), boundsTop = bounds.getTop(), boundsLeft = bounds.getLeft(), topOffset = mouseTop - boundsTop, leftOffset = mouseLeft - boundsLeft, startMouseTop = mouseTop, startMouseLeft = mouseLeft; ///
    this.addClass("dragging");
    this.setTopOffset(topOffset);
    this.setLeftOffset(leftOffset);
    this.setStartMouseTop(startMouseTop);
    this.setStartMouseLeft(startMouseLeft);
    this.drag(mouseTop, mouseLeft);
}
function stopDragging() {
    this.removeClass("dragging");
}
function dragging(mouseTop, mouseLeft) {
    this.drag(mouseTop, mouseLeft);
}
function startWaitingToDrag(mouseTop, mouseLeft) {
    var timeout = this.getTimeout();
    if (timeout === null) {
        timeout = setTimeout((function() {
            this.resetTimeout();
            var mouseOver = this.isMouseOver(mouseTop, mouseLeft);
            if (mouseOver) {
                this.startDragging(mouseTop, mouseLeft);
            }
        }).bind(this), _constants.START_DRAGGING_DELAY);
        this.updateTimeout(timeout);
    }
}
function stopWaitingToDrag() {
    var timeout = this.getTimeout();
    if (timeout !== null) {
        clearTimeout(timeout);
        this.resetTimeout();
    }
}
function mouseDownHandler(event, element) {
    var button = event.button, pageX = event.pageX, pageY = event.pageY, mouseTop = pageY, mouseLeft = pageX; ///
    _easy.window.on("blur", this.mouseUpHandler, this); ///
    _easy.window.onMouseUp(this.mouseUpHandler, this);
    _easy.window.onMouseMove(this.mouseMoveHandler, this);
    if (button === LEFT_MOUSE_BUTTON) {
        var dragging1 = this.isDragging();
        if (!dragging1) {
            this.startWaitingToDrag(mouseTop, mouseLeft);
        }
    }
}
function mouseUpHandler(event, element) {
    _easy.window.off("blur", this.mouseUpHandler, this); ///
    _easy.window.offMouseUp(this.mouseUpHandler, this);
    _easy.window.offMouseMove(this.mouseMoveHandler, this);
    var dragging2 = this.isDragging();
    if (dragging2) {
        this.stopDragging();
    } else {
        this.stopWaitingToDrag();
    }
}
function mouseMoveHandler(event, element) {
    var pageX = event.pageX, pageY = event.pageY, mouseTop = pageY, mouseLeft = pageX; ///
    var dragging2 = this.isDragging();
    if (dragging2) {
        this.dragging(mouseTop, mouseLeft);
    }
}
function drag(mouseTop, mouseLeft) {
    var topOffset = this.getTopOffset(), leftOffset = this.getLeftOffset(), startMouseTop = this.getStartMouseTop(), startMouseLeft = this.getStartMouseLeft(), squareDivWidth = _sufficient.controller.getSquareDivWidth(), squareDivHeight = _sufficient.controller.getSquareDivHeight(), windowScrollTop = _easy.window.getScrollTop(), windowScrollLeft = _easy.window.getScrollLeft();
    var top = mouseTop - topOffset - windowScrollTop, left = mouseLeft - leftOffset - windowScrollLeft;
    top = "".concat(top, "px"); ///
    left = "".concat(left, "px"); ///
    console.log(Math.floor((mouseLeft - startMouseLeft + windowScrollLeft) / squareDivWidth), Math.floor((mouseTop - startMouseTop + windowScrollTop) / squareDivHeight));
    var css = {
        top: top,
        left: left
    };
    this.css(css);
}
function resetTimeout() {
    var timeout = null;
    this.updateTimeout(timeout);
}
function getTimeout() {
    var state = this.getState(), timeout = state.timeout;
    return timeout;
}
function getTopOffset() {
    var state = this.getState(), topOffset = state.topOffset;
    return topOffset;
}
function getLeftOffset() {
    var state = this.getState(), leftOffset = state.leftOffset;
    return leftOffset;
}
function getStartMouseTop() {
    var state = this.getState(), startMouseTop = state.startMouseTop;
    return startMouseTop;
}
function getStartMouseLeft() {
    var state = this.getState(), startMouseLeft = state.startMouseLeft;
    return startMouseLeft;
}
function updateTimeout(timeout) {
    this.updateState({
        timeout: timeout
    });
}
function setTopOffset(topOffset) {
    this.updateState({
        topOffset: topOffset
    });
}
function setLeftOffset(leftOffset) {
    this.updateState({
        leftOffset: leftOffset
    });
}
function setStartMouseTop(startMouseTop) {
    this.updateState({
        startMouseTop: startMouseTop
    });
}
function setStartMouseLeft(startMouseLeft) {
    this.updateState({
        startMouseLeft: startMouseLeft
    });
}
function setInitialState() {
    var timeout = null, topOffset = null, leftOffset = null, startMouseTop = null, startMouseLeft = null;
    this.setState({
        timeout: timeout,
        topOffset: topOffset,
        leftOffset: leftOffset,
        startMouseTop: startMouseTop,
        startMouseLeft: startMouseLeft
    });
}
var _default = {
    isDragging: isDragging,
    isMouseOver: isMouseOver,
    startDragging: startDragging,
    stopDragging: stopDragging,
    dragging: dragging,
    startWaitingToDrag: startWaitingToDrag,
    stopWaitingToDrag: stopWaitingToDrag,
    mouseDownHandler: mouseDownHandler,
    mouseUpHandler: mouseUpHandler,
    mouseMoveHandler: mouseMoveHandler,
    drag: drag,
    resetTimeout: resetTimeout,
    getTimeout: getTimeout,
    getTopOffset: getTopOffset,
    getLeftOffset: getLeftOffset,
    getStartMouseTop: getStartMouseTop,
    getStartMouseLeft: getStartMouseLeft,
    updateTimeout: updateTimeout,
    setTopOffset: setTopOffset,
    setLeftOffset: setLeftOffset,
    setStartMouseTop: setStartMouseTop,
    setStartMouseLeft: setStartMouseLeft,
    setInitialState: setInitialState
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,