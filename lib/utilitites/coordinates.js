"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.xFromLeft = xFromLeft;
exports.yFromTop = yFromTop;
exports.leftFromX = leftFromX;
exports.topFromY = topFromY;
exports.coordinatesFromTopAndLeft = coordinatesFromTopAndLeft;
var _sufficient = require("sufficient");
var _coordinates = _interopRequireDefault(require("../coordinates"));
var _styles = require("../styles");
var _constants = require("../constants");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function xFromLeft(left) {
    var squareDivWidth = _sufficient.controller.getSquareDivWidth(), x = _constants.BOARD_INVERTED ? Math.floor(-left / squareDivWidth + _constants.HALF) : Math.floor(left / squareDivWidth + _constants.HALF);
    return x;
}
function yFromTop(top) {
    var squareDivHeight = _sufficient.controller.getSquareDivHeight(), y = _constants.BOARD_INVERTED ? Math.floor(top / squareDivHeight + _constants.HALF) : Math.floor(-top / squareDivHeight + _constants.HALF);
    return y;
}
function leftFromX(x) {
    var left = _constants.BOARD_INVERTED ? "".concat((_constants.BOARD_SIZE - 1 - x) * _styles.squareDivSize, "rem") : "".concat(x * _styles.squareDivSize, "rem");
    return left;
}
function topFromY(y) {
    var top = _constants.BOARD_INVERTED ? "".concat(y * _styles.squareDivSize, "rem") : "".concat((_constants.BOARD_SIZE - 1 - y) * _styles.squareDivSize, "rem");
    return top;
}
function coordinatesFromTopAndLeft(top, left) {
    var y = yFromTop(top), x = xFromLeft(left), coordinates = _coordinates.default.fromXAndY(x, y);
    return coordinates;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpdGVzL2Nvb3JkaW5hdGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBjb250cm9sbGVyIH0gZnJvbSBcInN1ZmZpY2llbnRcIjtcblxuaW1wb3J0IENvb3JkaW5hdGVzIGZyb20gXCIuLi9jb29yZGluYXRlc1wiO1xuXG5pbXBvcnQgeyBzcXVhcmVEaXZTaXplIH0gZnJvbSBcIi4uL3N0eWxlc1wiO1xuaW1wb3J0IHsgSEFMRiwgQk9BUkRfU0laRSwgQk9BUkRfSU5WRVJURUQgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB4RnJvbUxlZnQobGVmdCkge1xuICBjb25zdCBzcXVhcmVEaXZXaWR0aCA9IGNvbnRyb2xsZXIuZ2V0U3F1YXJlRGl2V2lkdGgoKSxcbiAgICAgICAgeCA9IEJPQVJEX0lOVkVSVEVEID9cbiAgICAgICAgICAgICAgTWF0aC5mbG9vcigoLWxlZnQgLyBzcXVhcmVEaXZXaWR0aCkgKyBIQUxGKSA6XG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcigobGVmdCAvIHNxdWFyZURpdldpZHRoKSArIEhBTEYpO1xuXG4gIHJldHVybiB4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24geUZyb21Ub3AodG9wKSB7XG4gIGNvbnN0IHNxdWFyZURpdkhlaWdodCA9IGNvbnRyb2xsZXIuZ2V0U3F1YXJlRGl2SGVpZ2h0KCksXG4gICAgICAgIHkgPSBCT0FSRF9JTlZFUlRFRCA/XG4gICAgICAgICAgICAgIE1hdGguZmxvb3IoKHRvcCAvIHNxdWFyZURpdkhlaWdodCkgKyBIQUxGKSA6XG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcigoLXRvcCAvIHNxdWFyZURpdkhlaWdodCkgKyBIQUxGKTtcblxuICByZXR1cm4geTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZnRGcm9tWCh4KSB7XG4gIGNvbnN0IGxlZnQgPSBCT0FSRF9JTlZFUlRFRCA/XG4gICAgICAgICAgICAgICAgIGAkeygoQk9BUkRfU0laRSAtIDEpIC0geCkgKiBzcXVhcmVEaXZTaXplfXJlbWAgOlxuICAgICAgICAgICAgICAgICAgIGAke3ggKiBzcXVhcmVEaXZTaXplfXJlbWA7XG5cbiAgcmV0dXJuIGxlZnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b3BGcm9tWSh5KSB7XG4gIGNvbnN0IHRvcCA9IEJPQVJEX0lOVkVSVEVEID9cbiAgICAgICAgICAgICAgICBgJHt5ICogc3F1YXJlRGl2U2l6ZX1yZW1gIDpcbiAgICAgICAgICAgICAgICAgIGAkeygoQk9BUkRfU0laRSAtIDEpIC0geSkgKiBzcXVhcmVEaXZTaXplfXJlbWA7XG5cbiAgcmV0dXJuIHRvcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvb3JkaW5hdGVzRnJvbVRvcEFuZExlZnQodG9wLCBsZWZ0KSB7XG4gIGNvbnN0IHkgPSB5RnJvbVRvcCh0b3ApLFxuICAgICAgICB4ID0geEZyb21MZWZ0KGxlZnQpLFxuICAgICAgICBjb29yZGluYXRlcyA9IENvb3JkaW5hdGVzLmZyb21YQW5kWSh4LCB5KTtcblxuICByZXR1cm4gY29vcmRpbmF0ZXM7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQVNJLFNBQVMsR0FBVCxTQUFTO1FBU1QsUUFBUSxHQUFSLFFBQVE7UUFTUixTQUFTLEdBQVQsU0FBUztRQVFULFFBQVEsR0FBUixRQUFRO1FBUVIseUJBQXlCLEdBQXpCLHlCQUF5QjtJQXpDZCxXQUFZO0lBRWYsWUFBZ0I7SUFFVixPQUFXO0lBQ1EsVUFBYzs7Ozs7O1NBRS9DLFNBQVMsQ0FBQyxJQUFJO1FBQ3RCLGNBQWMsR0FSSyxXQUFZLFlBUUgsaUJBQWlCLElBQzdDLENBQUMsR0FKd0MsVUFBYyxrQkFLakQsSUFBSSxDQUFDLEtBQUssRUFBRyxJQUFJLEdBQUcsY0FBYyxHQUxDLFVBQWMsU0FNL0MsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLEdBQUcsY0FBYyxHQU5BLFVBQWM7V0FRdEQsQ0FBQzs7U0FHTSxRQUFRLENBQUMsR0FBRztRQUNwQixlQUFlLEdBakJJLFdBQVksWUFpQkYsa0JBQWtCLElBQy9DLENBQUMsR0Fid0MsVUFBYyxrQkFjakQsSUFBSSxDQUFDLEtBQUssQ0FBRSxHQUFHLEdBQUcsZUFBZSxHQWRFLFVBQWMsU0FlL0MsSUFBSSxDQUFDLEtBQUssRUFBRyxHQUFHLEdBQUcsZUFBZSxHQWZELFVBQWM7V0FpQnRELENBQUM7O1NBR00sU0FBUyxDQUFDLENBQUM7UUFDbkIsSUFBSSxHQXJCcUMsVUFBYyxxQkFzQkosTUFBRyxFQXRCYixVQUFjLGNBc0I1QixDQUFDLEdBQUksQ0FBQyxJQXZCWCxPQUFXLGlCQXVCa0IsR0FBRyxRQUN0QixNQUFHLENBQXJCLENBQUMsR0F4Qk8sT0FBVyxpQkF3QkQsR0FBRztXQUVsQyxJQUFJOztTQUdHLFFBQVEsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsR0E3QnNDLFVBQWMscUJBOEIxQixNQUFHLENBQXJCLENBQUMsR0EvQlUsT0FBVyxpQkErQkosR0FBRyxRQUNvQixNQUFHLEVBL0JkLFVBQWMsY0ErQjNCLENBQUMsR0FBSSxDQUFDLElBaENaLE9BQVcsaUJBZ0NtQixHQUFHO1dBRXRELEdBQUc7O1NBR0kseUJBQXlCLENBQUMsR0FBRyxFQUFFLElBQUk7UUFDM0MsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEdBQ2hCLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxHQUNsQixXQUFXLEdBMUNLLFlBQWdCLFNBMENOLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztXQUV2QyxXQUFXIn0=